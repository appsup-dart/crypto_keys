import 'dart:convert';
import 'dart:typed_data';

import 'package:crypto_keys/crypto_keys.dart';
import 'package:test/test.dart';

void _testSigning(
    KeyPair keyPair, AlgorithmIdentifier algorithm, Uint8List data,
    [Uint8List? signature, bool? isRandom]) {
  var signer = keyPair.createSigner(algorithm);
  var verifier = keyPair.createVerifier(algorithm);

  if (signature != null) {
    expect(verifier.verify(data, Signature(signature)), isTrue);

    if (!isRandom!) {
      expect(signer.sign(data).data, signature);
    }
  }

  var s = signer.sign(data);
  expect(verifier.verify(data, s), isTrue);
  s = Signature(s.data..[0] += 1);
  expect(verifier.verify(data, s), isFalse);
}

void _testEncryption(
  KeyPair keyPair,
  AlgorithmIdentifier algorithm,
  Uint8List data, [
  EncryptionResult? encryptedData,
  bool? isRandom,
  bool biDirectional = true,
]) {
  var encrypter = keyPair.publicKey!.createEncrypter(algorithm);
  var decrypter = keyPair.privateKey!.createEncrypter(algorithm);

  if (encryptedData != null) {
    expect(decrypter.decrypt(encryptedData), data);

    if (!isRandom!) {
      expect(
          encrypter.encrypt(data,
              initializationVector: encryptedData.initializationVector,
              additionalAuthenticatedData:
                  encryptedData.additionalAuthenticatedData),
          encryptedData);
    }
  }

  expect(
      decrypter.decrypt(encrypter.encrypt(data,
          initializationVector: encryptedData?.initializationVector,
          additionalAuthenticatedData:
              encryptedData?.additionalAuthenticatedData)),
      data);

  if (biDirectional == true) {
    expect(
      encrypter.decrypt(
        decrypter.encrypt(
          data,
          initializationVector: encryptedData?.initializationVector,
          additionalAuthenticatedData:
              encryptedData?.additionalAuthenticatedData,
        ),
      ),
      data,
    );
  }
}

void main() {
  group('Signing', () {
    group('Signing with symmetric keys', () {
      var jwk = {
        'kty': 'oct',
        'k': 'AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75'
            'aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow'
      };

      var keyPair = KeyPair.fromJwk(jwk);

      var data = Uint8List.fromList([
        101,
        121,
        74,
        48,
        101,
        88,
        65,
        105,
        79,
        105,
        74,
        75,
        86,
        49,
        81,
        105,
        76,
        65,
        48,
        75,
        73,
        67,
        74,
        104,
        98,
        71,
        99,
        105,
        79,
        105,
        74,
        73,
        85,
        122,
        73,
        49,
        78,
        105,
        74,
        57,
        46,
        101,
        121,
        74,
        112,
        99,
        51,
        77,
        105,
        79,
        105,
        74,
        113,
        98,
        50,
        85,
        105,
        76,
        65,
        48,
        75,
        73,
        67,
        74,
        108,
        101,
        72,
        65,
        105,
        79,
        106,
        69,
        122,
        77,
        68,
        65,
        52,
        77,
        84,
        107,
        122,
        79,
        68,
        65,
        115,
        68,
        81,
        111,
        103,
        73,
        109,
        104,
        48,
        100,
        72,
        65,
        54,
        76,
        121,
        57,
        108,
        101,
        71,
        70,
        116,
        99,
        71,
        120,
        108,
        76,
        109,
        78,
        118,
        98,
        83,
        57,
        112,
        99,
        49,
        57,
        121,
        98,
        50,
        57,
        48,
        73,
        106,
        112,
        48,
        99,
        110,
        86,
        108,
        102,
        81
      ]);

      test('Example Signing Using HMAC SHA-256', () {
        var signature = Uint8List.fromList([
          116,
          24,
          223,
          180,
          151,
          153,
          224,
          37,
          79,
          250,
          96,
          125,
          216,
          173,
          187,
          186,
          22,
          212,
          37,
          77,
          105,
          214,
          191,
          240,
          91,
          88,
          5,
          88,
          83,
          132,
          141,
          121
        ]);

        _testSigning(
            keyPair, algorithms.signing.hmac.sha256, data, signature, false);
      });
      test('Example Signing Using HMAC SHA-384', () {
        _testSigning(keyPair, algorithms.signing.hmac.sha384, data);
      });
      test('Example Signing Using HMAC SHA-512', () {
        _testSigning(keyPair, algorithms.signing.hmac.sha512, data);
      });
    });

    group('Signing with RSA keys', () {
      var jwk = {
        'kty': 'RSA',
        'n': 'ofgWCuLjybRlzo0tZWJjNiuSfb4p4fAkd_wWJcyQoTbji9k0l8W26mPddx'
            'HmfHQp-Vaw-4qPCJrcS2mJPMEzP1Pt0Bm4d4QlL-yRT-SFd2lZS-pCgNMs'
            'D1W_YpRPEwOWvG6b32690r2jZ47soMZo9wGzjb_7OMg0LOL-bSf63kpaSH'
            'SXndS5z5rexMdbBYUsLA9e-KXBdQOS-UTo7WTBEMa2R2CapHg665xsmtdV'
            'MTBQY4uDZlxvb3qCo5ZwKh9kG4LT6_I5IhlJH7aGhyxXFvUK-DWNmoudF8'
            'NAco9_h9iaGNj8q2ethFkMLs91kzk2PAcDTW9gb54h4FRWyuXpoQ',
        'e': 'AQAB',
        'd': 'Eq5xpGnNCivDflJsRQBXHx1hdR1k6Ulwe2JZD50LpXyWPEAeP88vLNO97I'
            'jlA7_GQ5sLKMgvfTeXZx9SE-7YwVol2NXOoAJe46sui395IW_GO-pWJ1O0'
            'BkTGoVEn2bKVRUCgu-GjBVaYLU6f3l9kJfFNS3E0QbVdxzubSu3Mkqzjkn'
            '439X0M_V51gfpRLI9JYanrC4D4qAdGcopV_0ZHHzQlBjudU2QvXt4ehNYT'
            'CBr6XCLQUShb1juUO1ZdiYoFaFQT5Tw8bGUl_x_jTj3ccPDVZFD9pIuhLh'
            'BOneufuBiB4cS98l2SR_RQyGWSeWjnczT0QU91p1DhOVRuOopznQ',
        'p': '4BzEEOtIpmVdVEZNCqS7baC4crd0pqnRH_5IB3jw3bcxGn6QLvnEtfdUdi'
            'YrqBdss1l58BQ3KhooKeQTa9AB0Hw_Py5PJdTJNPY8cQn7ouZ2KKDcmnPG'
            'BY5t7yLc1QlQ5xHdwW1VhvKn-nXqhJTBgIPgtldC-KDV5z-y2XDwGUc',
        'q': 'uQPEfgmVtjL0Uyyx88GZFF1fOunH3-7cepKmtH4pxhtCoHqpWmT8YAmZxa'
            'ewHgHAjLYsp1ZSe7zFYHj7C6ul7TjeLQeZD_YwD66t62wDmpe_HlB-TnBA'
            '-njbglfIsRLtXlnDzQkv5dTltRJ11BKBBypeeF6689rjcJIDEz9RWdc',
        'dp': 'BwKfV3Akq5_MFZDFZCnW-wzl-CCo83WoZvnLQwCTeDv8uzluRSnm71I3Q'
            'CLdhrqE2e9YkxvuxdBfpT_PI7Yz-FOKnu1R6HsJeDCjn12Sk3vmAktV2zb'
            '34MCdy7cpdTh_YVr7tss2u6vneTwrA86rZtu5Mbr1C1XsmvkxHQAdYo0',
        'dq': 'h_96-mK1R_7glhsum81dZxjTnYynPbZpHziZjeeHcXYsXaaMwkOlODsWa'
            '7I9xXDoRwbKgB719rrmI2oKr6N3Do9U0ajaHF-NKJnwgjMd2w9cjz3_-ky'
            'NlxAr2v4IKhGNpmM5iIgOS1VZnOZ68m6_pbLBSp3nssTdlqvd0tIiTHU',
        'qi': 'IYd7DHOhrWvxkwPQsRM2tOgrjbcrfvtQJipd-DlcxyVuuM9sQLdgjVk2o'
            'y26F0EmpScGLq2MowX7fhd_QJQ3ydy5cY7YIBi87w93IKLEdfnbJtoOPLU'
            'W0ITrJReOgo1cq9SbsxYawBgfp_gh6A5603k2-ZQwVK0JKSHuLFkuQ3U'
      };

      var keyPair = KeyPair.fromJwk(jwk);

      var data = Uint8List.fromList([
        101,
        121,
        74,
        104,
        98,
        71,
        99,
        105,
        79,
        105,
        74,
        83,
        85,
        122,
        73,
        49,
        78,
        105,
        74,
        57,
        46,
        101,
        121,
        74,
        112,
        99,
        51,
        77,
        105,
        79,
        105,
        74,
        113,
        98,
        50,
        85,
        105,
        76,
        65,
        48,
        75,
        73,
        67,
        74,
        108,
        101,
        72,
        65,
        105,
        79,
        106,
        69,
        122,
        77,
        68,
        65,
        52,
        77,
        84,
        107,
        122,
        79,
        68,
        65,
        115,
        68,
        81,
        111,
        103,
        73,
        109,
        104,
        48,
        100,
        72,
        65,
        54,
        76,
        121,
        57,
        108,
        101,
        71,
        70,
        116,
        99,
        71,
        120,
        108,
        76,
        109,
        78,
        118,
        98,
        83,
        57,
        112,
        99,
        49,
        57,
        121,
        98,
        50,
        57,
        48,
        73,
        106,
        112,
        48,
        99,
        110,
        86,
        108,
        102,
        81
      ]);

      test('Example Signing Using RSASSA-PKCS1-v1_5 SHA-256', () {
        var signature = Uint8List.fromList([
          112,
          46,
          33,
          137,
          67,
          232,
          143,
          209,
          30,
          181,
          216,
          45,
          191,
          120,
          69,
          243,
          65,
          6,
          174,
          27,
          129,
          255,
          247,
          115,
          17,
          22,
          173,
          209,
          113,
          125,
          131,
          101,
          109,
          66,
          10,
          253,
          60,
          150,
          238,
          221,
          115,
          162,
          102,
          62,
          81,
          102,
          104,
          123,
          0,
          11,
          135,
          34,
          110,
          1,
          135,
          237,
          16,
          115,
          249,
          69,
          229,
          130,
          173,
          252,
          239,
          22,
          216,
          90,
          121,
          142,
          232,
          198,
          109,
          219,
          61,
          184,
          151,
          91,
          23,
          208,
          148,
          2,
          190,
          237,
          213,
          217,
          217,
          112,
          7,
          16,
          141,
          178,
          129,
          96,
          213,
          248,
          4,
          12,
          167,
          68,
          87,
          98,
          184,
          31,
          190,
          127,
          249,
          217,
          46,
          10,
          231,
          111,
          36,
          242,
          91,
          51,
          187,
          230,
          244,
          74,
          230,
          30,
          177,
          4,
          10,
          203,
          32,
          4,
          77,
          62,
          249,
          18,
          142,
          212,
          1,
          48,
          121,
          91,
          212,
          189,
          59,
          65,
          238,
          202,
          208,
          102,
          171,
          101,
          25,
          129,
          253,
          228,
          141,
          247,
          127,
          55,
          45,
          195,
          139,
          159,
          175,
          221,
          59,
          239,
          177,
          139,
          93,
          163,
          204,
          60,
          46,
          176,
          47,
          158,
          58,
          65,
          214,
          18,
          202,
          173,
          21,
          145,
          18,
          115,
          160,
          95,
          35,
          185,
          232,
          56,
          250,
          175,
          132,
          157,
          105,
          132,
          41,
          239,
          90,
          30,
          136,
          121,
          130,
          54,
          195,
          212,
          14,
          96,
          69,
          34,
          165,
          68,
          200,
          242,
          122,
          122,
          45,
          184,
          6,
          99,
          209,
          108,
          247,
          202,
          234,
          86,
          222,
          64,
          92,
          178,
          33,
          90,
          69,
          178,
          194,
          85,
          102,
          181,
          90,
          193,
          167,
          72,
          160,
          112,
          223,
          200,
          163,
          42,
          70,
          149,
          67,
          208,
          25,
          238,
          251,
          71
        ]);

        _testSigning(
            keyPair, algorithms.signing.rsa.sha256, data, signature, false);
      });
      test('Example Signing Using RSASSA-PKCS1-v1_5 SHA-384', () {
        _testSigning(keyPair, algorithms.signing.rsa.sha384, data);
      });
      test('Example Signing Using RSASSA-PKCS1-v1_5 SHA-512', () {
        _testSigning(keyPair, algorithms.signing.rsa.sha512, data);
      });

      test('Example Signing Using generated RSA keys', () {
        var text = 'Can we sign and verify this text';
        var data = utf8.encode(text);

        var keyPair = KeyPair.generateRsa();
        var alg = algorithms.signing.rsa.sha384;

        _testSigning(keyPair, alg, data);
      });
    });

    group('Signing with EC keys', () {
      test('Example Signing Using ECDSA P-256 SHA-256', () {
        var jwk = {
          'kty': 'EC',
          'crv': 'P-256',
          'x': 'f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU',
          'y': 'x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0',
          'd': 'jpsQnnGQmL-YBIffH1136cspYG6-0iY7X1fCE9-E9LI'
        };

        var keyPair = KeyPair.fromJwk(jwk);

        var data = Uint8List.fromList([
          101,
          121,
          74,
          104,
          98,
          71,
          99,
          105,
          79,
          105,
          74,
          70,
          85,
          122,
          73,
          49,
          78,
          105,
          74,
          57,
          46,
          101,
          121,
          74,
          112,
          99,
          51,
          77,
          105,
          79,
          105,
          74,
          113,
          98,
          50,
          85,
          105,
          76,
          65,
          48,
          75,
          73,
          67,
          74,
          108,
          101,
          72,
          65,
          105,
          79,
          106,
          69,
          122,
          77,
          68,
          65,
          52,
          77,
          84,
          107,
          122,
          79,
          68,
          65,
          115,
          68,
          81,
          111,
          103,
          73,
          109,
          104,
          48,
          100,
          72,
          65,
          54,
          76,
          121,
          57,
          108,
          101,
          71,
          70,
          116,
          99,
          71,
          120,
          108,
          76,
          109,
          78,
          118,
          98,
          83,
          57,
          112,
          99,
          49,
          57,
          121,
          98,
          50,
          57,
          48,
          73,
          106,
          112,
          48,
          99,
          110,
          86,
          108,
          102,
          81
        ]);

        var signature = Uint8List.fromList([
          14,
          209,
          33,
          83,
          121,
          99,
          108,
          72,
          60,
          47,
          127,
          21,
          88,
          7,
          212,
          2,
          163,
          178,
          40,
          3,
          58,
          249,
          124,
          126,
          23,
          129,
          154,
          195,
          22,
          158,
          166,
          101,
          197,
          10,
          7,
          211,
          140,
          60,
          112,
          229,
          216,
          241,
          45,
          175,
          8,
          74,
          84,
          128,
          166,
          101,
          144,
          197,
          242,
          147,
          80,
          154,
          143,
          63,
          127,
          138,
          131,
          163,
          84,
          213
        ]);
        _testSigning(
            keyPair, algorithms.signing.ecdsa.sha256, data, signature, true);
      });

      test('Example Signing Using ECDSA P-256K SHA-256', () {
        var keyPair = KeyPair.generateEc(curves.p256k);

        var data = Uint8List.fromList('hello world'.codeUnits);

        _testSigning(keyPair, algorithms.signing.ecdsa.sha256, data);
      });

      test('Example Signing Using ECDSA P-521 SHA-512', () {
        var jwk = {
          'kty': 'EC',
          'crv': 'P-521',
          'x': 'AekpBQ8ST8a8VcfVOTNl353vSrDCLLJXmPk06wTjxrrjcBpXp5EOnYG_'
              'NjFZ6OvLFV1jSfS9tsz4qUxcWceqwQGk',
          'y': 'ADSmRA43Z1DSNx_RvcLI87cdL07l6jQyyBXMoxVg_l2Th-x3S1WDhjDl'
              'y79ajL4Kkd0AZMaZmh9ubmf63e3kyMj2',
          'd': 'AY5pb7A0UFiB3RELSD64fTLOSV_jazdF7fLYyuTw8lOfRhWg6Y6rUrPA'
              'xerEzgdRhajnu0ferB0d53vM9mE15j2C'
        };

        var keyPair = KeyPair.fromJwk(jwk);

        var data = Uint8List.fromList([
          101,
          121,
          74,
          104,
          98,
          71,
          99,
          105,
          79,
          105,
          74,
          70,
          85,
          122,
          85,
          120,
          77,
          105,
          74,
          57,
          46,
          85,
          71,
          70,
          53,
          98,
          71,
          57,
          104,
          90,
          65
        ]);
        var signature = Uint8List.fromList([
          1,
          220,
          12,
          129,
          231,
          171,
          194,
          209,
          232,
          135,
          233,
          117,
          247,
          105,
          122,
          210,
          26,
          125,
          192,
          1,
          217,
          21,
          82,
          91,
          45,
          240,
          255,
          83,
          19,
          34,
          239,
          71,
          48,
          157,
          147,
          152,
          105,
          18,
          53,
          108,
          163,
          214,
          68,
          231,
          62,
          153,
          150,
          106,
          194,
          164,
          246,
          72,
          143,
          138,
          24,
          50,
          129,
          223,
          133,
          206,
          209,
          172,
          63,
          237,
          119,
          109,
          0,
          111,
          6,
          105,
          44,
          5,
          41,
          208,
          128,
          61,
          152,
          40,
          92,
          61,
          152,
          4,
          150,
          66,
          60,
          69,
          247,
          196,
          170,
          81,
          193,
          199,
          78,
          59,
          194,
          169,
          16,
          124,
          9,
          143,
          42,
          142,
          131,
          48,
          206,
          238,
          34,
          175,
          83,
          203,
          220,
          159,
          3,
          107,
          155,
          22,
          27,
          73,
          111,
          68,
          68,
          21,
          238,
          144,
          229,
          232,
          148,
          188,
          222,
          59,
          242,
          103
        ]);
        _testSigning(
            keyPair, algorithms.signing.ecdsa.sha512, data, signature, true);
      });

      test('Example Signing Using generated EC keys', () {
        var text = 'Can we sign and verify this text';
        var data = utf8.encode(text);

        for (var curve in [curves.p256, curves.p384, curves.p521]) {
          var keyPair = KeyPair.generateEc(curve);
          var alg = {
            curves.p256: algorithms.signing.ecdsa.sha256,
            curves.p384: algorithms.signing.ecdsa.sha384,
            curves.p521: algorithms.signing.ecdsa.sha512,
          }[curve]!;

          _testSigning(keyPair, alg, data);
        }
      });
    });

    group('EdDsa Signing', () {
      test('Example Signing Using EdDSA with ED25519', () {
        var jwk = {
          'kty': 'OKP',
          'crv': 'Ed25519',
          'd': 'nWGxne_9WmC6hEr0kuwsxERJxWl7MmkZcDusAxyuf2A',
          'x': '11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo'
        };
        var keyPair = KeyPair.fromJwk(jwk);

        var data = Uint8List.fromList([
          101,
          121,
          74,
          104,
          98,
          71,
          99,
          105,
          79,
          105,
          74,
          70,
          90,
          69,
          82,
          84,
          81,
          83,
          74,
          57,
          46,
          82,
          88,
          104,
          104,
          98,
          88,
          66,
          115,
          90,
          83,
          66,
          118,
          90,
          105,
          66,
          70,
          90,
          68,
          73,
          49,
          78,
          84,
          69,
          53,
          73,
          72,
          78,
          112,
          90,
          50,
          53,
          112,
          98,
          109,
          99
        ]);
        var signature = Uint8List.fromList([
          134,
          12,
          152,
          210,
          41,
          127,
          48,
          96,
          163,
          63,
          66,
          115,
          150,
          114,
          214,
          27,
          83,
          207,
          58,
          222,
          254,
          211,
          211,
          198,
          114,
          243,
          32,
          220,
          2,
          27,
          65,
          30,
          157,
          89,
          184,
          98,
          141,
          195,
          81,
          226,
          72,
          184,
          139,
          41,
          70,
          142,
          14,
          65,
          133,
          91,
          15,
          183,
          216,
          59,
          177,
          91,
          233,
          2,
          191,
          204,
          184,
          205,
          10,
          2
        ]);
        _testSigning(keyPair, algorithms.signing.eddsa, data, signature, false);
      });

      test('Example Signing Using EdDSA with ED25519 generated Keys', () {
        var text = 'Can we sign and verify this text';
        var data = utf8.encode(text);

        var keyPair = KeyPair.generateOkp(curves.ed25519);

        _testSigning(keyPair, algorithms.signing.eddsa, data);
      });
    });
  });

  group('Encryption', () {
    group('Content Encryption with symmetric keys', () {
      var data = Uint8List.fromList([
        76,
        105,
        118,
        101,
        32,
        108,
        111,
        110,
        103,
        32,
        97,
        110,
        100,
        32,
        112,
        114,
        111,
        115,
        112,
        101,
        114,
        46
      ]);

      test('Example encryption using AES_128_CBC', () {
        var keyPair = KeyPair.symmetric(SymmetricKey(
            keyValue: Uint8List.fromList([
          107,
          124,
          212,
          45,
          111,
          107,
          9,
          219,
          200,
          177,
          0,
          240,
          143,
          156,
          44,
          207
        ])));
        var encryptedData = EncryptionResult(
            Uint8List.fromList([
              40,
              57,
              83,
              181,
              119,
              33,
              133,
              148,
              198,
              185,
              243,
              24,
              152,
              230,
              6,
              75,
              129,
              223,
              127,
              19,
              210,
              82,
              183,
              230,
              168,
              33,
              215,
              104,
              143,
              112,
              56,
              102
            ]),
            initializationVector: Uint8List.fromList([
              3,
              22,
              60,
              12,
              43,
              67,
              104,
              105,
              108,
              108,
              105,
              99,
              111,
              116,
              104,
              101
            ]));

        _testEncryption(
            keyPair, algorithms.encryption.aes.cbc, data, encryptedData, false);
      });

      test('Example encryption using AES_192_CBC', () {
        var keyPair = KeyPair.generateSymmetric(192);
        _testEncryption(keyPair, algorithms.encryption.aes.cbc, data);
      });
      test('Example encryption using AES_256_CBC', () {
        var keyPair = KeyPair.generateSymmetric(256);
        _testEncryption(keyPair, algorithms.encryption.aes.cbc, data);
      });

      test('Example encryption using AES_128_CBC_HMAC_SHA_256', () {
        var keyPair = KeyPair.symmetric(SymmetricKey(
            keyValue: Uint8List.fromList([
          4,
          211,
          31,
          197,
          84,
          157,
          252,
          254,
          11,
          100,
          157,
          250,
          63,
          170,
          106,
          206,
          107,
          124,
          212,
          45,
          111,
          107,
          9,
          219,
          200,
          177,
          0,
          240,
          143,
          156,
          44,
          207
        ])));
        var encryptedData = EncryptionResult(
            Uint8List.fromList([
              40,
              57,
              83,
              181,
              119,
              33,
              133,
              148,
              198,
              185,
              243,
              24,
              152,
              230,
              6,
              75,
              129,
              223,
              127,
              19,
              210,
              82,
              183,
              230,
              168,
              33,
              215,
              104,
              143,
              112,
              56,
              102
            ]),
            initializationVector: Uint8List.fromList([
              3,
              22,
              60,
              12,
              43,
              67,
              104,
              105,
              108,
              108,
              105,
              99,
              111,
              116,
              104,
              101
            ]),
            additionalAuthenticatedData: Uint8List.fromList([
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              66,
              77,
              84,
              73,
              52,
              83,
              49,
              99,
              105,
              76,
              67,
              74,
              108,
              98,
              109,
              77,
              105,
              79,
              105,
              74,
              66,
              77,
              84,
              73,
              52,
              81,
              48,
              74,
              68,
              76,
              85,
              104,
              84,
              77,
              106,
              85,
              50,
              73,
              110,
              48
            ]),
            authenticationTag: Uint8List.fromList([
              83,
              73,
              191,
              98,
              104,
              205,
              211,
              128,
              201,
              189,
              199,
              133,
              32,
              38,
              194,
              85
            ]));

        _testEncryption(keyPair, algorithms.encryption.aes.cbcWithHmac.sha256,
            data, encryptedData, false);
      });
      test('Example encryption using AES_192_CBC_HMAC_SHA_384', () {
        var keyPair = KeyPair.generateSymmetric(384);
        _testEncryption(
            keyPair, algorithms.encryption.aes.cbcWithHmac.sha384, data);
      });
      test('Example encryption using AES_256_CBC_HMAC_SHA_512', () {
        var keyPair = KeyPair.generateSymmetric(512);
        _testEncryption(
            keyPair, algorithms.encryption.aes.cbcWithHmac.sha512, data);
      });

      test('Example encryption using AES_128_GCM', () {
        var keyPair = KeyPair.generateSymmetric(128);
        _testEncryption(keyPair, algorithms.encryption.aes.gcm, data);
      });
      test('Example encryption using AES_192_GCM', () {
        var keyPair = KeyPair.generateSymmetric(192);
        _testEncryption(keyPair, algorithms.encryption.aes.gcm, data);
      });
      test(
        'Example encryption using AES_256_GCM',
        () {
          var data = Uint8List.fromList([
            84,
            104,
            101,
            32,
            116,
            114,
            117,
            101,
            32,
            115,
            105,
            103,
            110,
            32,
            111,
            102,
            32,
            105,
            110,
            116,
            101,
            108,
            108,
            105,
            103,
            101,
            110,
            99,
            101,
            32,
            105,
            115,
            32,
            110,
            111,
            116,
            32,
            107,
            110,
            111,
            119,
            108,
            101,
            100,
            103,
            101,
            32,
            98,
            117,
            116,
            32,
            105,
            109,
            97,
            103,
            105,
            110,
            97,
            116,
            105,
            111,
            110,
            46
          ]);
          var keyPair = KeyPair.symmetric(SymmetricKey(
              keyValue: Uint8List.fromList([
            177,
            161,
            244,
            128,
            84,
            143,
            225,
            115,
            63,
            180,
            3,
            255,
            107,
            154,
            212,
            246,
            138,
            7,
            110,
            91,
            112,
            46,
            34,
            105,
            47,
            130,
            203,
            46,
            122,
            234,
            64,
            252
          ])));

          var encryptedData = EncryptionResult(
              Uint8List.fromList([
                229,
                236,
                166,
                241,
                53,
                191,
                115,
                196,
                174,
                43,
                73,
                109,
                39,
                122,
                233,
                96,
                140,
                206,
                120,
                52,
                51,
                237,
                48,
                11,
                190,
                219,
                186,
                80,
                111,
                104,
                50,
                142,
                47,
                167,
                59,
                61,
                181,
                127,
                196,
                21,
                40,
                82,
                242,
                32,
                123,
                143,
                168,
                226,
                73,
                216,
                176,
                144,
                138,
                247,
                106,
                60,
                16,
                205,
                160,
                109,
                64,
                63,
                192
              ]),
              additionalAuthenticatedData: Uint8List.fromList([
                101,
                121,
                74,
                104,
                98,
                71,
                99,
                105,
                79,
                105,
                74,
                83,
                85,
                48,
                69,
                116,
                84,
                48,
                70,
                70,
                85,
                67,
                73,
                115,
                73,
                109,
                86,
                117,
                89,
                121,
                73,
                54,
                73,
                107,
                69,
                121,
                78,
                84,
                90,
                72,
                81,
                48,
                48,
                105,
                102,
                81
              ]),
              initializationVector: Uint8List.fromList(
                  [227, 197, 117, 252, 2, 219, 233, 68, 180, 225, 77, 219]),
              authenticationTag: Uint8List.fromList([
                92,
                80,
                104,
                49,
                133,
                25,
                161,
                215,
                173,
                101,
                219,
                211,
                136,
                91,
                210,
                145
              ]));

          _testEncryption(keyPair, algorithms.encryption.aes.gcm, data,
              encryptedData, false);
        }, /* skip: 'GCM mode not implemented'*/
      );
    });

    group(
      'Key Encryption with symmetric keys',
      () {
        var data = Uint8List.fromList([
          4,
          211,
          31,
          197,
          84,
          157,
          252,
          254,
          11,
          100,
          157,
          250,
          63,
          170,
          106,
          206,
          107,
          124,
          212,
          45,
          111,
          107,
          9,
          219,
          200,
          177,
          0,
          240,
          143,
          156,
          44,
          207
        ]);

        test('Example encryption using AES Key Wrap 128', () {
          var keyPair =
              KeyPair.fromJwk({'kty': 'oct', 'k': 'GawgguFyGrWKav7AX4VKUg'});

          var encryptedData = EncryptionResult(Uint8List.fromList([
            232,
            160,
            123,
            211,
            183,
            76,
            245,
            132,
            200,
            128,
            123,
            75,
            190,
            216,
            22,
            67,
            201,
            138,
            193,
            186,
            9,
            91,
            122,
            31,
            246,
            90,
            28,
            139,
            57,
            3,
            76,
            124,
            193,
            11,
            98,
            37,
            173,
            61,
            104,
            57
          ]));

          _testEncryption(keyPair, algorithms.encryption.aes.keyWrap, data,
              encryptedData, false);
        });
        test('Example encryption using AES Key Wrap 192', () {
          var keyPair = KeyPair.generateSymmetric(192);
          _testEncryption(keyPair, algorithms.encryption.aes.keyWrap, data);
        });
        test('Example encryption using AES Key Wrap 256', () {
          var keyPair = KeyPair.generateSymmetric(256);
          _testEncryption(keyPair, algorithms.encryption.aes.keyWrap, data);
        });
      }, /*skip: 'AES key wrap not implemented'*/
    );

    group('Encryption with RSA keys', () {
      test('Example encryption using RSAES-PKCS1-v1_5', () {
        var jwk = {
          'kty': 'RSA',
          'n': 'sXchDaQebHnPiGvyDOAT4saGEUetSyo9MKLOoWFsueri23bOdgWp4Dy1Wl'
              'UzewbgBHod5pcM9H95GQRV3JDXboIRROSBigeC5yjU1hGzHHyXss8UDpre'
              'cbAYxknTcQkhslANGRUZmdTOQ5qTRsLAt6BTYuyvVRdhS8exSZEy_c4gs_'
              '7svlJJQ4H9_NxsiIoLwAEk7-Q3UXERGYw_75IDrGA84-lA_-Ct4eTlXHBI'
              'Y2EaV7t7LjJaynVJCpkv4LKjTTAumiGUIuQhrNhZLuF_RJLqHpM2kgWFLU'
              '7-VTdL1VbC2tejvcI2BlMkEpk1BzBZI0KQB0GaDWFLN-aEAw3vRw',
          'e': 'AQAB',
          'd': 'VFCWOqXr8nvZNyaaJLXdnNPXZKRaWCjkU5Q2egQQpTBMwhprMzWzpR8Sxq'
              '1OPThh_J6MUD8Z35wky9b8eEO0pwNS8xlh1lOFRRBoNqDIKVOku0aZb-ry'
              'nq8cxjDTLZQ6Fz7jSjR1Klop-YKaUHc9GsEofQqYruPhzSA-QgajZGPbE_'
              '0ZaVDJHfyd7UUBUKunFMScbflYAAOYJqVIVwaYR5zWEEceUjNnTNo_CVSj'
              '-VvXLO5VZfCUAVLgW4dpf1SrtZjSt34YLsRarSb127reG_DUwg9Ch-Kyvj'
              'T1SkHgUWRVGcyly7uvVGRSDwsXypdrNinPA4jlhoNdizK2zF2CWQ',
          'p': '9gY2w6I6S6L0juEKsbeDAwpd9WMfgqFoeA9vEyEUuk4kLwBKcoe1x4HG68'
              'ik918hdDSE9vDQSccA3xXHOAFOPJ8R9EeIAbTi1VwBYnbTp87X-xcPWlEP'
              'krdoUKW60tgs1aNd_Nnc9LEVVPMS390zbFxt8TN_biaBgelNgbC95sM',
          'q': 'uKlCKvKv_ZJMVcdIs5vVSU_6cPtYI1ljWytExV_skstvRSNi9r66jdd9-y'
              'BhVfuG4shsp2j7rGnIio901RBeHo6TPKWVVykPu1iYhQXw1jIABfw-MVsN'
              '-3bQ76WLdt2SDxsHs7q7zPyUyHXmps7ycZ5c72wGkUwNOjYelmkiNS0',
          'dp': 'w0kZbV63cVRvVX6yk3C8cMxo2qCM4Y8nsq1lmMSYhG4EcL6FWbX5h9yuv'
              'ngs4iLEFk6eALoUS4vIWEwcL4txw9LsWH_zKI-hwoReoP77cOdSL4AVcra'
              'Hawlkpyd2TWjE5evgbhWtOxnZee3cXJBkAi64Ik6jZxbvk-RR3pEhnCs',
          'dq': 'o_8V14SezckO6CNLKs_btPdFiO9_kC1DsuUTd2LAfIIVeMZ7jn1Gus_Ff'
              '7B7IVx3p5KuBGOVF8L-qifLb6nQnLysgHDh132NDioZkhH7mI7hPG-PYE_'
              'odApKdnqECHWw0J-F0JWnUd6D2B_1TvF9mXA2Qx-iGYn8OVV1Bsmp6qU',
          'qi': 'eNho5yRBEBxhGBtQRww9QirZsB66TrfFReG_CcteI1aCneT0ELGhYlRlC'
              'tUkTRclIfuEPmNsNDPbLoLqqCVznFbvdB7x-Tl-m0l_eFTj2KiqwGqE9PZ'
              'B9nNTwMVvH3VRRSLWACvPnSiwP8N5Usy-WRXS-V7TbpxIhvepTfE0NNo'
        };
        var keyPair = KeyPair.fromJwk(jwk);

        var data = Uint8List.fromList([
          4,
          211,
          31,
          197,
          84,
          157,
          252,
          254,
          11,
          100,
          157,
          250,
          63,
          170,
          106,
          206,
          107,
          124,
          212,
          45,
          111,
          107,
          9,
          219,
          200,
          177,
          0,
          240,
          143,
          156,
          44,
          207
        ]);

        var encryptedData = EncryptionResult(Uint8List.fromList([
          80,
          104,
          72,
          58,
          11,
          130,
          236,
          139,
          132,
          189,
          255,
          205,
          61,
          86,
          151,
          176,
          99,
          40,
          44,
          233,
          176,
          189,
          205,
          70,
          202,
          169,
          72,
          40,
          226,
          181,
          156,
          223,
          120,
          156,
          115,
          232,
          150,
          209,
          145,
          133,
          104,
          112,
          237,
          156,
          116,
          250,
          65,
          102,
          212,
          210,
          103,
          240,
          177,
          61,
          93,
          40,
          71,
          231,
          223,
          226,
          240,
          157,
          15,
          31,
          150,
          89,
          200,
          215,
          198,
          203,
          108,
          70,
          117,
          66,
          212,
          238,
          193,
          205,
          23,
          161,
          169,
          218,
          243,
          203,
          128,
          214,
          127,
          253,
          215,
          139,
          43,
          17,
          135,
          103,
          179,
          220,
          28,
          2,
          212,
          206,
          131,
          158,
          128,
          66,
          62,
          240,
          78,
          186,
          141,
          125,
          132,
          227,
          60,
          137,
          43,
          31,
          152,
          199,
          54,
          72,
          34,
          212,
          115,
          11,
          152,
          101,
          70,
          42,
          219,
          233,
          142,
          66,
          151,
          250,
          126,
          146,
          141,
          216,
          190,
          73,
          50,
          177,
          146,
          5,
          52,
          247,
          28,
          197,
          21,
          59,
          170,
          247,
          181,
          89,
          131,
          241,
          169,
          182,
          246,
          99,
          15,
          36,
          102,
          166,
          182,
          172,
          197,
          136,
          230,
          120,
          60,
          58,
          219,
          243,
          149,
          94,
          222,
          150,
          154,
          194,
          110,
          227,
          225,
          112,
          39,
          89,
          233,
          112,
          207,
          211,
          241,
          124,
          174,
          69,
          221,
          179,
          107,
          196,
          225,
          127,
          167,
          112,
          226,
          12,
          242,
          16,
          24,
          28,
          120,
          182,
          244,
          213,
          244,
          153,
          194,
          162,
          69,
          160,
          244,
          248,
          63,
          165,
          141,
          4,
          207,
          249,
          193,
          79,
          131,
          0,
          169,
          233,
          127,
          167,
          101,
          151,
          125,
          56,
          112,
          111,
          248,
          29,
          232,
          90,
          29,
          147,
          110,
          169,
          146,
          114,
          165,
          204,
          71,
          136,
          41,
          252
        ]));

        _testEncryption(keyPair, algorithms.encryption.rsa.pkcs1, data,
            encryptedData, true);
      });

      test('Example encryption using RSAES-OAEP', () {
        var jwk = {
          'kty': 'RSA',
          'n': 'oahUIoWw0K0usKNuOR6H4wkf4oBUXHTxRvgb48E-BVvxkeDNjbC4he8rUW'
              'cJoZmds2h7M70imEVhRU5djINXtqllXI4DFqcI1DgjT9LewND8MW2Krf3S'
              'psk_ZkoFnilakGygTwpZ3uesH-PFABNIUYpOiN15dsQRkgr0vEhxN92i2a'
              'sbOenSZeyaxziK72UwxrrKoExv6kc5twXTq4h-QChLOln0_mtUZwfsRaMS'
              'tPs6mS6XrgxnxbWhojf663tuEQueGC-FCMfra36C9knDFGzKsNa7LZK2dj'
              'YgyD3JR_MB_4NUJW_TqOQtwHYbxevoJArm-L5StowjzGy-_bq6Gw',
          'e': 'AQAB',
          'd': 'kLdtIj6GbDks_ApCSTYQtelcNttlKiOyPzMrXHeI-yk1F7-kpDxY4-WY5N'
              'WV5KntaEeXS1j82E375xxhWMHXyvjYecPT9fpwR_M9gV8n9Hrh2anTpTD9'
              '3Dt62ypW3yDsJzBnTnrYu1iwWRgBKrEYY46qAZIrA2xAwnm2X7uGR1hghk'
              'qDp0Vqj3kbSCz1XyfCs6_LehBwtxHIyh8Ripy40p24moOAbgxVw3rxT_vl'
              't3UVe4WO3JkJOzlpUf-KTVI2Ptgm-dARxTEtE-id-4OJr0h-K-VFs3VSnd'
              'VTIznSxfyrj8ILL6MG_Uv8YAu7VILSB3lOW085-4qE3DzgrTjgyQ',
          'p': '1r52Xk46c-LsfB5P442p7atdPUrxQSy4mti_tZI3Mgf2EuFVbUoDBvaRQ-'
              'SWxkbkmoEzL7JXroSBjSrK3YIQgYdMgyAEPTPjXv_hI2_1eTSPVZfzL0lf'
              'fNn03IXqWF5MDFuoUYE0hzb2vhrlN_rKrbfDIwUbTrjjgieRbwC6Cl0',
          'q': 'wLb35x7hmQWZsWJmB_vle87ihgZ19S8lBEROLIsZG4ayZVe9Hi9gDVCOBm'
              'UDdaDYVTSNx_8Fyw1YYa9XGrGnDew00J28cRUoeBB_jKI1oma0Orv1T9aX'
              'IWxKwd4gvxFImOWr3QRL9KEBRzk2RatUBnmDZJTIAfwTs0g68UZHvtc',
          'dp': 'ZK-YwE7diUh0qR1tR7w8WHtolDx3MZ_OTowiFvgfeQ3SiresXjm9gZ5KL'
              'hMXvo-uz-KUJWDxS5pFQ_M0evdo1dKiRTjVw_x4NyqyXPM5nULPkcpU827'
              'rnpZzAJKpdhWAgqrXGKAECQH0Xt4taznjnd_zVpAmZZq60WPMBMfKcuE',
          'dq': 'Dq0gfgJ1DdFGXiLvQEZnuKEN0UUmsJBxkjydc3j4ZYdBiMRAy86x0vHCj'
              'ywcMlYYg4yoC4YZa9hNVcsjqA3FeiL19rk8g6Qn29Tt0cj8qqyFpz9vNDB'
              'UfCAiJVeESOjJDZPYHdHY8v1b-o-Z2X5tvLx-TCekf7oxyeKDUqKWjis',
          'qi': 'VIMpMYbPf47dT1w_zDUXfPimsSegnMOA1zTaX7aGk_8urY6R8-ZW1FxU7'
              'AlWAyLWybqq6t16VFd7hQd0y6flUK4SlOydB61gwanOsXGOAOv82cHq0E3'
              'eL4HrtZkUuKvnPrMnsUUFlfUdybVzxyjz9JF_XyaY14ardLSjf4L_FNY'
        };

        var keyPair = KeyPair.fromJwk(jwk);

        var data = Uint8List.fromList([
          177,
          161,
          244,
          128,
          84,
          143,
          225,
          115,
          63,
          180,
          3,
          255,
          107,
          154,
          212,
          246,
          138,
          7,
          110,
          91,
          112,
          46,
          34,
          105,
          47,
          130,
          203,
          46,
          122,
          234,
          64,
          252
        ]);

        var encryptedData = EncryptionResult(Uint8List.fromList([
          56,
          163,
          154,
          192,
          58,
          53,
          222,
          4,
          105,
          218,
          136,
          218,
          29,
          94,
          203,
          22,
          150,
          92,
          129,
          94,
          211,
          232,
          53,
          89,
          41,
          60,
          138,
          56,
          196,
          216,
          82,
          98,
          168,
          76,
          37,
          73,
          70,
          7,
          36,
          8,
          191,
          100,
          136,
          196,
          244,
          220,
          145,
          158,
          138,
          155,
          4,
          117,
          141,
          230,
          199,
          247,
          173,
          45,
          182,
          214,
          74,
          177,
          107,
          211,
          153,
          11,
          205,
          196,
          171,
          226,
          162,
          128,
          171,
          182,
          13,
          237,
          239,
          99,
          193,
          4,
          91,
          219,
          121,
          223,
          107,
          167,
          61,
          119,
          228,
          173,
          156,
          137,
          134,
          200,
          80,
          219,
          74,
          253,
          56,
          185,
          91,
          177,
          34,
          158,
          89,
          154,
          205,
          96,
          55,
          18,
          138,
          43,
          96,
          218,
          215,
          128,
          124,
          75,
          138,
          243,
          85,
          25,
          109,
          117,
          140,
          26,
          155,
          249,
          67,
          167,
          149,
          231,
          100,
          6,
          41,
          65,
          214,
          251,
          232,
          87,
          72,
          40,
          182,
          149,
          154,
          168,
          31,
          193,
          126,
          215,
          89,
          28,
          111,
          219,
          125,
          182,
          139,
          235,
          195,
          197,
          23,
          234,
          55,
          58,
          63,
          180,
          68,
          202,
          206,
          149,
          75,
          205,
          248,
          176,
          67,
          39,
          178,
          60,
          98,
          193,
          32,
          238,
          122,
          96,
          158,
          222,
          57,
          183,
          111,
          210,
          55,
          188,
          215,
          206,
          180,
          166,
          150,
          166,
          106,
          250,
          55,
          229,
          72,
          40,
          69,
          214,
          216,
          104,
          23,
          40,
          135,
          212,
          28,
          127,
          41,
          80,
          175,
          174,
          168,
          115,
          171,
          197,
          89,
          116,
          92,
          103,
          246,
          83,
          216,
          182,
          176,
          84,
          37,
          147,
          35,
          45,
          219,
          172,
          99,
          226,
          233,
          73,
          37,
          124,
          42,
          72,
          49,
          242,
          35,
          127,
          184,
          134,
          117,
          114,
          135,
          206
        ]));

        /// OAEP doesn't support decryption from a PrivateKey in PointyCastle.
        _testEncryption(
          keyPair,
          algorithms.encryption.rsa.oaep,
          data,
          encryptedData,
          true,
          false,
        );
      });

      test('Example encryption using RSAES-OAEP-256', () {
        var jwk = {
          'kty': 'RSA',
          'n': '2cQJH1f6yF9DcGa8Cmbnhn4LHLs5L6kNb2rxkrNFZArJLRaKvaC3tMCKZ8Zg'
              'IpO9bVMPx5UMjJoaf7p9O5BSApVqA2J10fUbdSIomCcDwvGo0eyhty0D'
              'ILLWTMXzGEVM3BXzuJQoeDkuUCXXcCwA4Msyyd2OHVu-pB2OrGv6fcjH'
              'wjINty3UoKm08lCvAevBKHsuA-FFwQII9bycvRx5wRqFUjdMAyiOmLYB'
              'HBaJSi11g3HVexMcb29v14PSlVzdGUMN8oboa-zcIyaPrIiczLqAkSXQ'
              'NdEFHrjsJHfFeNMfOblLM7icKN_tyWujYeItt4kqUIimPn5dHjwgcQYE7w',
          'e': 'AQAB',
          'd': 'dyUz3ItVceX1Tv1WqtZMnKA_0jN5gWMcL7ayf5JISAlCssGfnUre2C10TH0U'
              'QjbVMIh-nLMnD5KNJw9Qz5MR28oGG932Gq7hm__ZeA34l-OCe4Ddpgwh'
              'pvVSHOU9MS1RdSUpmPavAcA_X6ikrAHXZSaoHhxzUgrNTpvBYQMfJUv_'
              '492fStIseQ9rwAMOpCWOiWMZOQm3KJVTLLunXdKf_UxmzmKXYKYZWke3'
              'AWIzUqnOfqIjfDTMunF4UWU0zKlhcsaQNmYMVrJGajD1bJdy_dbUU3LE'
              '8sx-bdkUI6oBk-sFtTTVyVdQcetG9kChJ5EnY5R6tt_4_xFG5kxzTo6qaQ',
          'p': '7yQmgE60SL7QrXpAJhChLgKnXWi6C8tVx1lA8FTpphpLaCtK-HbgBVHC'
              'prC2CfaM1mxFJZahxgFjC9ehuV8OzMNyFs8kekS82EsQGksi8HJP'
              'xyR1fU6ATa36ogPG0nNaqm3EDmYyjowhntgBz2OkbFAsTMHTdna-'
              'pZBRJa9lm5U',
          'q': '6R4dzo9LwHLO73EMQPQsmwXjVOvAS5W6rgQ-BCtMhec_QosAXIVE'
              '3AGyfweqZm6rurXCVFykDLwJ30GepLQ8nTlzeV6clx0x70sa'
              'GGKKVmCsHuVYWwgIRyJTrt4SX29NQDZ_FE52NlO3OhPkj1Ex'
              'Sk_pGMqGRFd26K8g0jJsXXM',
          'dp': 'VByn-hs0qB2Ncmb8ZycUOgWu7ljmjz1up1ZKU_3ZzJWVDkej7-6H'
              '7vcJ-u1OqgRxFv4v9_-aWPWl68VlWbkIkJbx6vniv6qrrXwB'
              'Zu4klOPwEYBOXsucrzXRYOjpJp5yNl2zRslFYQQC00bwpAxN'
              'CdfNLRZDlXhAqCUxlYqyt10',
          'dq': 'MJFbuGtWZvQEdRJicS3uFSY25LxxRc4eJJ8xpIC44rT5Ew4O'
              'tzf0zrlzzM92Cv1HvhCcOiNK8nRCwkbTnJEIh-EuU70I'
              'dttYSfilqSruk2x0r8Msk1qrDtbyBF60CToRKC2ycDKg'
              'olTyuaDnX4yU7lyTvdyD-L0YQwYpmmFy_k0',
          'qi': 'vy7XCwZ3jyMGik81TIZDAOQKC8FVUc0TG5KVYfti4tgw'
              'zUqFwtuB8Oc1ctCKRbE7uZUPwZh4OsCTLqIvqBQd'
              'a_kaxOxo5EF7iXj6yHmZ2s8P_Z_u3JLuh-oAT_6k'
              'mbLx6CAO0DbtKtxp24Ivc1hDfqSwWORgN1AOrSRC'
              'mE3nwxg'
        };

        var keyPair = KeyPair.fromJwk(jwk);

        var encryptedData = EncryptionResult(Uint8List.fromList([
          124,
          190,
          72,
          47,
          151,
          12,
          10,
          56,
          212,
          244,
          111,
          127,
          102,
          59,
          3,
          217,
          115,
          180,
          28,
          140,
          19,
          59,
          6,
          213,
          194,
          233,
          92,
          101,
          92,
          55,
          215,
          250,
          241,
          218,
          164,
          220,
          31,
          54,
          216,
          132,
          139,
          235,
          189,
          183,
          21,
          45,
          55,
          201,
          206,
          127,
          49,
          109,
          13,
          212,
          16,
          190,
          56,
          217,
          152,
          25,
          212,
          247,
          5,
          96,
          161,
          13,
          97,
          227,
          215,
          136,
          76,
          175,
          99,
          19,
          205,
          241,
          217,
          175,
          143,
          243,
          159,
          45,
          34,
          67,
          18,
          164,
          122,
          146,
          252,
          14,
          111,
          169,
          224,
          132,
          107,
          113,
          127,
          55,
          65,
          253,
          84,
          111,
          22,
          221,
          158,
          122,
          22,
          194,
          3,
          120,
          22,
          166,
          35,
          152,
          28,
          123,
          210,
          76,
          87,
          65,
          60,
          108,
          118,
          41,
          145,
          208,
          138,
          194,
          243,
          222,
          134,
          81,
          240,
          69,
          162,
          103,
          92,
          40,
          18,
          145,
          242,
          241,
          174,
          197,
          161,
          13,
          179,
          206,
          224,
          229,
          100,
          66,
          80,
          57,
          74,
          225,
          211,
          214,
          255,
          16,
          156,
          102,
          112,
          77,
          163,
          47,
          172,
          38,
          18,
          216,
          26,
          111,
          44,
          114,
          221,
          88,
          22,
          131,
          113,
          170,
          72,
          245,
          8,
          74,
          82,
          89,
          87,
          209,
          211,
          134,
          229,
          73,
          123,
          60,
          228,
          180,
          151,
          105,
          158,
          212,
          67,
          156,
          3,
          212,
          170,
          55,
          60,
          35,
          0,
          114,
          26,
          147,
          37,
          120,
          132,
          28,
          62,
          224,
          84,
          177,
          228,
          81,
          62,
          191,
          206,
          178,
          186,
          14,
          39,
          167,
          147,
          151,
          144,
          238,
          20,
          41,
          129,
          56,
          166,
          254,
          120,
          211,
          112,
          230,
          255,
          134,
          17,
          197,
          88,
          175,
          92,
          59,
          95,
          218,
          23,
          160
        ]));

        var data =
            base64Url.decode('A0lSKnZfXznJcsx6nRs78tJw9EqXfaCn-tbsMxvITdA=');

        _testEncryption(keyPair, algorithms.encryption.rsa.oaep256, data,
            encryptedData, true, false);
      });
    });
  });
}

List<int> base64ToBytes(String encoded) {
  encoded += List.filled((4 - encoded.length % 4) % 4, '=').join();
  return base64Url.decode(encoded);
}

BigInt base64ToInt(String encoded) {
  final b256 = BigInt.from(256);
  return base64ToBytes(encoded)
      .fold(BigInt.zero, (a, b) => a * b256 + BigInt.from(b));
}
